# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Documentation Files

## n8n Integration Documentation
Located in `/docs/n8n`
### Reference
- `n8n/reference/01.node-ui-elements.md` - UI component guidelines
- `n8n/reference/02.code-standards.md` - Coding standards and practices
- `n8n/reference/03.node-file-structure.md` - Node architecture overview
- `n8n/reference/04.node-codex-files.md` - Node documentation format
- `n8n/reference/05.credentials-files.md` - Credential management guide
- `n8n/reference/06.http-helpers.md` - HTTP request helper utilities
- `n8n/reference/07.paired-items.md` - Working with paired data items

### Base Files
- `n8n/reference/base-files/01.base-files.md` - Core file structure guide
- `n8n/reference/base-files/02.structure.md` - Base architecture overview
- `n8n/reference/base-files/03.standard-parameters.md` - Parameter configuration guide
- `n8n/reference/base-files/04.declarative-style-parameters.md` - Declarative parameter setup
- `n8n/reference/base-files/05.programmatic-style-parameters.md` - Programmatic parameter setup
- `n8n/reference/base-files/06.programmatic-style-execute-method.md` - Execution method guide

### Planning
- `n8n/reference/plan/01.node-types.md` - Node type specifications
- `n8n/reference/plan/02.choose-node-method.md` - Node method selection guide
- `n8n/reference/plan/03.node-ui-design.md` - UI design principles

# MCP Server Tools Usage

## Strategic Tool Selection

- **Sequential Thinking:**
  - Use for multi-step operations requiring careful planning.
  - Maintain operational context to enable course correction.
  - Begin with a higher number of total thoughts (e.g. 8â€“12) for complex tasks.
  - Use branching to explore alternative approaches and mark revisions when needed.
  - Set `needsMoreThoughts=true` when new complexities arise.

- **Web Research (via Brave Search):**
  - Always conduct initial broad searches, then follow with detailed research.
  - Validate technical approaches, error handling strategies, and best practices.
  - Cross-reference multiple reputable sources before implementation.

- **Puppeteer Operations:**
  - Use for intricate web interactions and testing.
  - Implement chained operations with robust error handling, waits, and retries.
  - Optimise memory by closing pages when done and reusing browser instances.

- **Server Memory (Knowledge Graph):**
  - Maintain complex relationships and operational context.
  - Create entities for major components and concepts.
  - Map dependencies and document architectural decisions.
  - Regularly clean up obsolete entities and update relationships.

### Sequential Thinking
- Use for operations requiring multiple steps
- Essential for maintaining operational context
- Helps break down large changes into manageable chunks
- Enables course correction and revision of approach
- Key usage patterns:
  * Start with higher total_thoughts for complex tasks (8-12)
  * Use branching for exploring alternative approaches
  * Mark revisions when changing previous decisions
  * Set needsMoreThoughts=true when discovering new complexity
  * Use as tactical memory during long operations

### Web Research (Brave Search)
- Always search before implementing complex features
- Research patterns:
  * Start with broad concept search
  * Follow up with specific implementation details
  * Look for recent discussions and solutions
  * Cross-reference multiple sources
  * Use for validating approach before major changes
- Key usage:
  * Technical implementation patterns
  * Error handling strategies
  * Best practices validation
  * Community solutions to similar problems

### Puppeteer Operations
- Use for complex web interactions and testing
- Strategic patterns:
  * Chain operations with proper error handling
  * Use screenshots for validation points
  * Implement waits and retries for stability
  * Maintain session context across operations
- Memory management:
  * Close pages when done
  * Reuse browser instances when possible
  * Clear large objects after operations
  * Monitor memory usage in long sessions

## Operational Guidelines

### For Moderate Changes (30-100 lines):
1. Start with sequential thinking (5-8 thoughts)
2. Research similar implementations
3. Plan key validation points
4. Execute with regular state checks

### For Large Changes (100+ lines):
1. Begin with comprehensive sequential thinking (10+ thoughts)
2. Extensive research phase
3. Break into sub-operations
4. Regular validation checkpoints
5. Maintain operational memory through scratchpad


# Lessons

## n8n v1.0+ Node Development

1. **Node Structure**
   - Always use TypeScript for type safety and better maintainability
   - Implement modular architecture with clear separation of concerns
   - Follow resource locator pattern for standardised resource access
   - Use declarative node descriptions for better AI agent integration

2. **AI Agent Integration**
   - Provide clear, detailed parameter descriptions
   - Include comprehensive error handling guidance
   - Add usage examples for common scenarios
   - Document workflow patterns and best practices

3. **Best Practices**
   - Implement proper rate limiting and retry mechanisms
   - Use secure credential storage through n8n's credential system
   - Follow TypeScript best practices for type safety
   - Provide comprehensive error messages and handling
   - Use Keyv for workflow-level caching with email-based indexing
   - Make caching configurable with toggle and TTL settings

4. **Documentation**
   - Include detailed API documentation
   - Add workflow examples
   - Document AI agent capabilities
   - Provide troubleshooting guides

# Scratchpad

## Task: Create n8n Node for QuickEmailVerification API

### Overview
Creating an n8n node for the QuickEmailVerification API that follows n8n v1.0+ structure. The node will provide email verification functionality with proper error handling, rate limiting, and security features.

### Implementation Phases

#### Phase 1: Project Setup and Structure
[X] Create project directory structure
[X] Set up package.json with n8n dependencies
[X] Configure TypeScript and build tools
[X] Create README.md with installation and usage instructions

#### Phase 2: Credentials Implementation
[X] Create credentials class implementing ICredentialType
[X] Implement API key storage and validation
[X] Add cache configuration options (toggle and TTL)
[X] Set up secure credential handling

#### Phase 3: Node Core Implementation
[X] Create main node class implementing INodeType
[X] Define node parameters and properties
[X] Implement node description
[X] Set up resource locator
[X] Implement Keyv cache integration

#### Phase 4: API Integration and Processing
[X] Create API handler class with response processing
[X] Implement rate limiting and retry logic
[X] Set up error handling
[X] Implement cache check and storage
[X] Add input validation

#### Phase 5: Documentation
[X] Generate API documentation
[X] Add usage examples
[X] Add troubleshooting guide

### Component Structure

1. **QuickEmailVerificationNode**
   - Main node implementation
   - Handles workflow integration
   - Manages execution flow
   - Implements n8n v1.0+ standards

2. **CredentialsFile**
   - API key management
   - Credential validation
   - Cache configuration management
     * Cache toggle (enabled/disabled)
     * Cache TTL setting (default: 30 days)

3. **APIHandler**
   - API communication and response processing
   - Rate limit management
   - Error handling and retry logic
   - Cache management
     * Pre-request cache check
     * Post-response cache storage
     * Email-based cache indexing
   - Input validation

### Technical Considerations

1. **Security**
   - Secure credential storage
   - API key protection
   - Error message sanitisation

2. **Performance**
   - Efficient API calls with caching
   - Email-indexed Keyv storage
   - Configurable cache settings

3. **Reliability**
   - Error handling with retries
   - Input validation
   - Rate limit adherence

4. **Maintainability**
   - Clear documentation
   - Type safety
   - Clean code practices
